name: CD

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  test-and-deploy:
    name: Full Test Suite and Deploy
    runs-on: ubuntu-latest
    # Only run if:
    # - Triggered by tag push, OR
    # - Triggered by release, OR
    # - Triggered by CI completion AND CI succeeded
    if: |
      github.event_name == 'push' ||
      github.event_name == 'release' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: booking
          POSTGRES_PASSWORD: booking_secret
          POSTGRES_DB: booking_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @booking/shared build

      - name: Generate Prisma Client
        run: pnpm --filter backend exec prisma generate

      - name: Run linter (backend)
        run: pnpm --filter backend lint

      - name: Run linter (frontend)
        run: pnpm --filter frontend lint

      - name: Run unit tests (backend)
        run: pnpm --filter backend test

      - name: Run unit tests (frontend)
        run: pnpm --filter frontend test

      - name: Setup database
        env:
          DATABASE_URL: postgresql://booking:booking_secret@localhost:5432/booking_db
        run: |
          pnpm --filter backend exec prisma migrate deploy
          pnpm --filter backend exec prisma db seed
          echo "Verifying seed data..."
          pnpm --filter backend exec prisma db execute --stdin <<EOF
          SELECT COUNT(*) as travel_count FROM travels;
          EOF

      - name: Run integration tests (backend)
        env:
          DATABASE_URL: postgresql://booking:booking_secret@localhost:5432/booking_db
          NODE_ENV: test
          PORT: 3000
        run: pnpm --filter backend test:integration:ci

      - name: Build backend
        run: pnpm --filter backend build

      - name: Build frontend
        run: pnpm --filter frontend build
        env:
          NUXT_PUBLIC_API_BASE: http://localhost:3000/api

      - name: Create deployment artifact
        run: |
          mkdir -p artifacts
          tar -czf artifacts/backend-${{ github.ref_name }}.tar.gz \
            packages/backend/dist \
            packages/backend/package.json \
            packages/backend/prisma \
            packages/shared
          tar -czf artifacts/frontend-${{ github.ref_name }}.tar.gz \
            packages/frontend/.output \
            packages/frontend/package.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: artifacts/
          retention-days: 30